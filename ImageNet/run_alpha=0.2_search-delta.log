nohup: ignoring input
Running alpha=0.2, delta=0 on device=
2024-10-25 23:31:44,818 - INFO - Loading pretrained ViT-L-14 from OpenAI.
You are using config.init_device='cpu', but you can also use config.init_device="meta" with Composer + FSDP for fast initialization.
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:50<01:40, 50.19s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [02:18<01:12, 72.54s/it]Loading checkpoint shards: 100%|██████████| 3/3 [03:17<00:00, 66.46s/it]Loading checkpoint shards: 100%|██████████| 3/3 [03:17<00:00, 65.86s/it]
Flamingo model initialized with 0 trainable parameters
load clip successfully...
Loaded class indices from ./imagenet_class_indices.pkl
self.args.catergory_num:100
len of self.all_class_names:100
get memory bank and sample pool ...
get samples for each class:   0%|          | 0/100 [00:00<?, ?it/s]get samples for each class:   1%|          | 1/100 [00:01<03:10,  1.93s/it]get samples for each class:   2%|▏         | 2/100 [00:03<02:32,  1.56s/it]get samples for each class:   3%|▎         | 3/100 [00:04<02:28,  1.53s/it]get samples for each class:   4%|▍         | 4/100 [00:05<02:09,  1.35s/it]get samples for each class:   5%|▌         | 5/100 [00:07<02:03,  1.30s/it]get samples for each class:   6%|▌         | 6/100 [00:08<02:00,  1.28s/it]get samples for each class:   7%|▋         | 7/100 [00:09<01:56,  1.26s/it]get samples for each class:   8%|▊         | 8/100 [00:10<01:56,  1.27s/it]get samples for each class:   9%|▉         | 9/100 [00:11<01:51,  1.23s/it]get samples for each class:  10%|█         | 10/100 [00:13<01:52,  1.25s/it]get samples for each class:  11%|█         | 11/100 [00:14<01:48,  1.22s/it]get samples for each class:  12%|█▏        | 12/100 [00:15<01:46,  1.21s/it]get samples for each class:  13%|█▎        | 13/100 [00:16<01:45,  1.21s/it]get samples for each class:  14%|█▍        | 14/100 [00:18<01:47,  1.24s/it]get samples for each class:  15%|█▌        | 15/100 [00:19<01:47,  1.26s/it]get samples for each class:  16%|█▌        | 16/100 [00:20<01:47,  1.28s/it]get samples for each class:  17%|█▋        | 17/100 [00:21<01:42,  1.23s/it]get samples for each class:  18%|█▊        | 18/100 [00:23<01:42,  1.25s/it]get samples for each class:  19%|█▉        | 19/100 [00:24<01:44,  1.29s/it]get samples for each class:  20%|██        | 20/100 [00:25<01:38,  1.24s/it]get samples for each class:  21%|██        | 21/100 [00:26<01:34,  1.19s/it]get samples for each class:  22%|██▏       | 22/100 [00:27<01:25,  1.09s/it]get samples for each class:  23%|██▎       | 23/100 [00:28<01:20,  1.05s/it]get samples for each class:  24%|██▍       | 24/100 [00:29<01:26,  1.14s/it]get samples for each class:  25%|██▌       | 25/100 [00:31<01:29,  1.19s/it]get samples for each class:  26%|██▌       | 26/100 [00:32<01:29,  1.20s/it]get samples for each class:  27%|██▋       | 27/100 [00:33<01:26,  1.18s/it]get samples for each class:  28%|██▊       | 28/100 [00:34<01:29,  1.24s/it]get samples for each class:  29%|██▉       | 29/100 [00:36<01:27,  1.24s/it]get samples for each class:  30%|███       | 30/100 [00:39<02:21,  2.02s/it]get samples for each class:  31%|███       | 31/100 [00:42<02:19,  2.03s/it]get samples for each class:  32%|███▏      | 32/100 [00:43<02:04,  1.82s/it]get samples for each class:  33%|███▎      | 33/100 [00:44<01:57,  1.75s/it]get samples for each class:  34%|███▍      | 34/100 [00:46<01:42,  1.55s/it]get samples for each class:  35%|███▌      | 35/100 [00:47<01:29,  1.38s/it]get samples for each class:  36%|███▌      | 36/100 [00:48<01:23,  1.30s/it]get samples for each class:  37%|███▋      | 37/100 [00:49<01:23,  1.33s/it]get samples for each class:  38%|███▊      | 38/100 [00:51<01:33,  1.52s/it]get samples for each class:  39%|███▉      | 39/100 [00:52<01:23,  1.38s/it]get samples for each class:  40%|████      | 40/100 [00:53<01:23,  1.40s/it]get samples for each class:  41%|████      | 41/100 [00:55<01:18,  1.34s/it]get samples for each class:  42%|████▏     | 42/100 [00:56<01:17,  1.33s/it]get samples for each class:  43%|████▎     | 43/100 [00:57<01:14,  1.31s/it]get samples for each class:  44%|████▍     | 44/100 [00:58<01:06,  1.19s/it]get samples for each class:  45%|████▌     | 45/100 [00:59<01:07,  1.22s/it]get samples for each class:  46%|████▌     | 46/100 [01:01<01:06,  1.23s/it]get samples for each class:  47%|████▋     | 47/100 [01:02<01:01,  1.17s/it]get samples for each class:  48%|████▊     | 48/100 [01:03<00:57,  1.10s/it]get samples for each class:  49%|████▉     | 49/100 [01:04<00:59,  1.17s/it]get samples for each class:  50%|█████     | 50/100 [01:05<01:00,  1.21s/it]get samples for each class:  51%|█████     | 51/100 [01:07<00:59,  1.21s/it]get samples for each class:  52%|█████▏    | 52/100 [01:08<00:55,  1.16s/it]get samples for each class:  53%|█████▎    | 53/100 [01:09<00:56,  1.21s/it]get samples for each class:  54%|█████▍    | 54/100 [01:10<00:59,  1.30s/it]get samples for each class:  55%|█████▌    | 55/100 [01:12<01:00,  1.35s/it]get samples for each class:  56%|█████▌    | 56/100 [01:13<00:56,  1.29s/it]get samples for each class:  57%|█████▋    | 57/100 [01:14<00:57,  1.33s/it]get samples for each class:  58%|█████▊    | 58/100 [01:16<00:55,  1.31s/it]get samples for each class:  59%|█████▉    | 59/100 [01:17<00:55,  1.35s/it]get samples for each class:  60%|██████    | 60/100 [01:18<00:49,  1.24s/it]get samples for each class:  61%|██████    | 61/100 [01:19<00:49,  1.27s/it]get samples for each class:  62%|██████▏   | 62/100 [01:21<00:51,  1.35s/it]get samples for each class:  63%|██████▎   | 63/100 [01:22<00:48,  1.31s/it]get samples for each class:  64%|██████▍   | 64/100 [01:23<00:44,  1.23s/it]get samples for each class:  65%|██████▌   | 65/100 [01:25<00:49,  1.40s/it]get samples for each class:  66%|██████▌   | 66/100 [01:26<00:46,  1.37s/it]get samples for each class:  67%|██████▋   | 67/100 [01:28<00:43,  1.32s/it]get samples for each class:  68%|██████▊   | 68/100 [01:29<00:43,  1.36s/it]get samples for each class:  69%|██████▉   | 69/100 [01:30<00:39,  1.27s/it]get samples for each class:  70%|███████   | 70/100 [01:31<00:38,  1.29s/it]get samples for each class:  71%|███████   | 71/100 [01:33<00:38,  1.32s/it]get samples for each class:  72%|███████▏  | 72/100 [01:34<00:37,  1.34s/it]get samples for each class:  73%|███████▎  | 73/100 [01:35<00:34,  1.27s/it]get samples for each class:  74%|███████▍  | 74/100 [01:36<00:31,  1.23s/it]get samples for each class:  75%|███████▌  | 75/100 [01:38<00:30,  1.23s/it]get samples for each class:  76%|███████▌  | 76/100 [01:39<00:29,  1.24s/it]get samples for each class:  77%|███████▋  | 77/100 [01:41<00:30,  1.33s/it]get samples for each class:  78%|███████▊  | 78/100 [01:42<00:28,  1.30s/it]get samples for each class:  79%|███████▉  | 79/100 [01:43<00:24,  1.19s/it]get samples for each class:  80%|████████  | 80/100 [01:44<00:24,  1.24s/it]get samples for each class:  81%|████████  | 81/100 [01:45<00:21,  1.13s/it]get samples for each class:  82%|████████▏ | 82/100 [01:46<00:20,  1.16s/it]get samples for each class:  83%|████████▎ | 83/100 [01:48<00:23,  1.40s/it]get samples for each class:  84%|████████▍ | 84/100 [01:49<00:22,  1.39s/it]get samples for each class:  85%|████████▌ | 85/100 [01:51<00:20,  1.34s/it]get samples for each class:  86%|████████▌ | 86/100 [01:52<00:19,  1.37s/it]get samples for each class:  87%|████████▋ | 87/100 [01:53<00:17,  1.32s/it]get samples for each class:  88%|████████▊ | 88/100 [01:55<00:15,  1.30s/it]get samples for each class:  89%|████████▉ | 89/100 [01:56<00:14,  1.31s/it]get samples for each class:  90%|█████████ | 90/100 [01:57<00:12,  1.26s/it]get samples for each class:  91%|█████████ | 91/100 [01:58<00:10,  1.21s/it]get samples for each class:  92%|█████████▏| 92/100 [01:59<00:09,  1.18s/it]get samples for each class:  93%|█████████▎| 93/100 [02:01<00:08,  1.21s/it]get samples for each class:  94%|█████████▍| 94/100 [02:02<00:07,  1.22s/it]get samples for each class:  95%|█████████▌| 95/100 [02:03<00:05,  1.17s/it]get samples for each class:  96%|█████████▌| 96/100 [02:04<00:04,  1.19s/it]get samples for each class:  97%|█████████▋| 97/100 [02:05<00:03,  1.19s/it]get samples for each class:  98%|█████████▊| 98/100 [02:06<00:02,  1.13s/it]get samples for each class:  99%|█████████▉| 99/100 [02:07<00:01,  1.08s/it]get samples for each class: 100%|██████████| 100/100 [02:09<00:00,  1.23s/it]get samples for each class: 100%|██████████| 100/100 [02:09<00:00,  1.29s/it]
Support set size: 1000, Sample pool size: 10000
Preprocess Supporting set...:   0%|          | 0/1000 [00:00<?, ?it/s]Preprocess Supporting set...: 100%|██████████| 1000/1000 [00:00<00:00, 294937.35it/s]
Get the value of every sample in support set
Using sample pool to update the support set:   0%|          | 0/10000 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/data/chy/online/ImageNet/main.py", line 98, in <module>
    results, predictions = inferencer.run()
  File "/data/chy/online/ImageNet/inferencers.py", line 482, in run
    self.retriever.update_online(sample)
  File "/data/chy/online/ImageNet/retriever.py", line 163, in update_online
    self.update_based_on_gradient_and_prototype(query_sample)
  File "/data/chy/online/ImageNet/retriever.py", line 226, in update_based_on_gradient_and_prototype
    support_gradient = self.compute_gradient(query_sample,self.args.alpha,self.args.beta,self.args.delta)
  File "/data/chy/online/ImageNet/retriever.py", line 195, in compute_gradient
    support_gradient = alpha * clip_similairity + beta * margin+ delta * error_rate
TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'
Using sample pool to update the support set:   0%|          | 0/10000 [00:00<?, ?it/s]
Running alpha=0.2, delta=0.1 on device=
2024-10-25 23:48:47,215 - INFO - Loading pretrained ViT-L-14 from OpenAI.
You are using config.init_device='cpu', but you can also use config.init_device="meta" with Composer + FSDP for fast initialization.
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:27<00:54, 27.43s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [01:12<00:37, 37.90s/it]Loading checkpoint shards: 100%|██████████| 3/3 [01:41<00:00, 33.72s/it]Loading checkpoint shards: 100%|██████████| 3/3 [01:41<00:00, 33.80s/it]
Flamingo model initialized with 0 trainable parameters
load clip successfully...
Loaded class indices from ./imagenet_class_indices.pkl
self.args.catergory_num:100
len of self.all_class_names:100
get memory bank and sample pool ...
get samples for each class:   0%|          | 0/100 [00:00<?, ?it/s]get samples for each class:   1%|          | 1/100 [00:01<01:59,  1.21s/it]get samples for each class:   2%|▏         | 2/100 [00:02<01:45,  1.07s/it]get samples for each class:   3%|▎         | 3/100 [00:02<01:30,  1.07it/s]get samples for each class:   4%|▍         | 4/100 [00:03<01:32,  1.04it/s]get samples for each class:   5%|▌         | 5/100 [00:04<01:33,  1.01it/s]get samples for each class:   6%|▌         | 6/100 [00:05<01:33,  1.01it/s]get samples for each class:   7%|▋         | 7/100 [00:07<01:43,  1.12s/it]get samples for each class:   8%|▊         | 8/100 [00:08<01:53,  1.23s/it]get samples for each class:   9%|▉         | 9/100 [00:10<01:54,  1.25s/it]get samples for each class:  10%|█         | 10/100 [00:11<01:48,  1.20s/it]get samples for each class:  11%|█         | 11/100 [00:12<01:36,  1.08s/it]get samples for each class:  12%|█▏        | 12/100 [00:13<01:32,  1.05s/it]get samples for each class:  13%|█▎        | 13/100 [00:14<01:32,  1.07s/it]get samples for each class:  14%|█▍        | 14/100 [00:15<01:29,  1.04s/it]get samples for each class:  15%|█▌        | 15/100 [00:16<01:26,  1.01s/it]get samples for each class:  16%|█▌        | 16/100 [00:17<01:27,  1.04s/it]get samples for each class:  17%|█▋        | 17/100 [00:18<01:25,  1.03s/it]get samples for each class:  18%|█▊        | 18/100 [00:19<01:23,  1.02s/it]get samples for each class:  19%|█▉        | 19/100 [00:20<01:22,  1.01s/it]get samples for each class:  20%|██        | 20/100 [00:21<01:28,  1.10s/it]get samples for each class:  21%|██        | 21/100 [00:22<01:27,  1.11s/it]get samples for each class:  22%|██▏       | 22/100 [00:23<01:21,  1.05s/it]get samples for each class:  23%|██▎       | 23/100 [00:24<01:18,  1.02s/it]get samples for each class:  24%|██▍       | 24/100 [00:25<01:15,  1.00it/s]get samples for each class:  25%|██▌       | 25/100 [00:26<01:18,  1.04s/it]get samples for each class:  26%|██▌       | 26/100 [00:27<01:18,  1.05s/it]get samples for each class:  27%|██▋       | 27/100 [00:28<01:16,  1.04s/it]get samples for each class:  28%|██▊       | 28/100 [00:29<01:18,  1.09s/it]get samples for each class:  29%|██▉       | 29/100 [00:30<01:12,  1.02s/it]get samples for each class:  30%|███       | 30/100 [00:31<01:05,  1.07it/s]get samples for each class:  31%|███       | 31/100 [00:32<01:05,  1.05it/s]get samples for each class:  32%|███▏      | 32/100 [00:33<01:03,  1.07it/s]get samples for each class:  33%|███▎      | 33/100 [00:34<01:07,  1.00s/it]get samples for each class:  34%|███▍      | 34/100 [00:35<01:10,  1.08s/it]get samples for each class:  35%|███▌      | 35/100 [00:36<01:11,  1.10s/it]get samples for each class:  36%|███▌      | 36/100 [00:38<01:20,  1.26s/it]get samples for each class:  37%|███▋      | 37/100 [00:39<01:18,  1.24s/it]get samples for each class:  38%|███▊      | 38/100 [00:41<01:24,  1.36s/it]get samples for each class:  39%|███▉      | 39/100 [00:42<01:13,  1.21s/it]get samples for each class:  40%|████      | 40/100 [00:43<01:12,  1.21s/it]get samples for each class:  41%|████      | 41/100 [00:44<01:13,  1.25s/it]get samples for each class:  42%|████▏     | 42/100 [00:46<01:14,  1.29s/it]get samples for each class:  43%|████▎     | 43/100 [00:47<01:11,  1.25s/it]get samples for each class:  44%|████▍     | 44/100 [00:48<01:01,  1.10s/it]get samples for each class:  45%|████▌     | 45/100 [00:49<01:01,  1.12s/it]get samples for each class:  46%|████▌     | 46/100 [00:50<01:06,  1.24s/it]get samples for each class:  47%|████▋     | 47/100 [00:52<01:06,  1.26s/it]get samples for each class:  48%|████▊     | 48/100 [00:53<01:03,  1.21s/it]get samples for each class:  49%|████▉     | 49/100 [00:54<01:08,  1.34s/it]get samples for each class:  50%|█████     | 50/100 [00:56<01:10,  1.41s/it]get samples for each class:  51%|█████     | 51/100 [00:57<01:10,  1.44s/it]get samples for each class:  52%|█████▏    | 52/100 [00:59<01:06,  1.39s/it]get samples for each class:  53%|█████▎    | 53/100 [01:00<01:08,  1.47s/it]get samples for each class:  54%|█████▍    | 54/100 [01:02<01:07,  1.46s/it]get samples for each class:  55%|█████▌    | 55/100 [01:03<01:05,  1.46s/it]get samples for each class:  56%|█████▌    | 56/100 [01:05<01:02,  1.42s/it]get samples for each class:  57%|█████▋    | 57/100 [01:06<00:59,  1.38s/it]get samples for each class:  58%|█████▊    | 58/100 [01:07<00:55,  1.32s/it]get samples for each class:  59%|█████▉    | 59/100 [01:08<00:52,  1.27s/it]get samples for each class:  60%|██████    | 60/100 [01:09<00:46,  1.16s/it]get samples for each class:  61%|██████    | 61/100 [01:10<00:45,  1.16s/it]get samples for each class:  62%|██████▏   | 62/100 [01:12<00:46,  1.23s/it]get samples for each class:  63%|██████▎   | 63/100 [01:13<00:45,  1.24s/it]get samples for each class:  64%|██████▍   | 64/100 [01:14<00:42,  1.19s/it]get samples for each class:  65%|██████▌   | 65/100 [01:15<00:45,  1.29s/it]get samples for each class:  66%|██████▌   | 66/100 [01:17<00:47,  1.40s/it]get samples for each class:  67%|██████▋   | 67/100 [01:18<00:42,  1.30s/it]get samples for each class:  68%|██████▊   | 68/100 [01:20<00:41,  1.30s/it]get samples for each class:  69%|██████▉   | 69/100 [01:21<00:38,  1.23s/it]get samples for each class:  70%|███████   | 70/100 [01:22<00:36,  1.21s/it]get samples for each class:  71%|███████   | 71/100 [01:23<00:34,  1.19s/it]get samples for each class:  72%|███████▏  | 72/100 [01:24<00:32,  1.18s/it]get samples for each class:  73%|███████▎  | 73/100 [01:25<00:31,  1.18s/it]get samples for each class:  74%|███████▍  | 74/100 [01:26<00:27,  1.06s/it]get samples for each class:  75%|███████▌  | 75/100 [01:27<00:25,  1.03s/it]get samples for each class:  76%|███████▌  | 76/100 [01:28<00:24,  1.03s/it]get samples for each class:  77%|███████▋  | 77/100 [01:29<00:26,  1.15s/it]get samples for each class:  78%|███████▊  | 78/100 [01:31<00:25,  1.17s/it]get samples for each class:  79%|███████▉  | 79/100 [01:32<00:23,  1.12s/it]get samples for each class:  80%|████████  | 80/100 [01:33<00:22,  1.12s/it]get samples for each class:  81%|████████  | 81/100 [01:34<00:21,  1.12s/it]get samples for each class:  82%|████████▏ | 82/100 [01:35<00:20,  1.14s/it]get samples for each class:  83%|████████▎ | 83/100 [01:36<00:20,  1.20s/it]get samples for each class:  84%|████████▍ | 84/100 [01:38<00:19,  1.22s/it]get samples for each class:  85%|████████▌ | 85/100 [01:39<00:19,  1.27s/it]get samples for each class:  86%|████████▌ | 86/100 [01:40<00:16,  1.20s/it]get samples for each class:  87%|████████▋ | 87/100 [01:41<00:15,  1.16s/it]get samples for each class:  88%|████████▊ | 88/100 [01:42<00:13,  1.15s/it]get samples for each class:  89%|████████▉ | 89/100 [01:43<00:12,  1.14s/it]get samples for each class:  90%|█████████ | 90/100 [01:44<00:11,  1.11s/it]get samples for each class:  91%|█████████ | 91/100 [01:46<00:09,  1.11s/it]get samples for each class:  92%|█████████▏| 92/100 [01:47<00:08,  1.08s/it]get samples for each class:  93%|█████████▎| 93/100 [01:48<00:07,  1.08s/it]get samples for each class:  94%|█████████▍| 94/100 [01:49<00:06,  1.06s/it]get samples for each class:  95%|█████████▌| 95/100 [01:50<00:05,  1.01s/it]get samples for each class:  96%|█████████▌| 96/100 [01:51<00:04,  1.06s/it]get samples for each class:  97%|█████████▋| 97/100 [01:52<00:03,  1.15s/it]get samples for each class:  98%|█████████▊| 98/100 [01:53<00:02,  1.20s/it]get samples for each class:  99%|█████████▉| 99/100 [01:55<00:01,  1.20s/it]get samples for each class: 100%|██████████| 100/100 [01:56<00:00,  1.34s/it]get samples for each class: 100%|██████████| 100/100 [01:56<00:00,  1.17s/it]
Support set size: 1000, Sample pool size: 10000
Preprocess Supporting set...:   0%|          | 0/1000 [00:00<?, ?it/s]Preprocess Supporting set...: 100%|██████████| 1000/1000 [00:00<00:00, 238801.18it/s]
Get the value of every sample in support set
Using sample pool to update the support set:   0%|          | 0/10000 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/data/chy/online/ImageNet/main.py", line 98, in <module>
    results, predictions = inferencer.run()
  File "/data/chy/online/ImageNet/inferencers.py", line 482, in run
    self.retriever.update_online(sample)
  File "/data/chy/online/ImageNet/retriever.py", line 163, in update_online
    self.update_based_on_gradient_and_prototype(query_sample)
  File "/data/chy/online/ImageNet/retriever.py", line 226, in update_based_on_gradient_and_prototype
    support_gradient = self.compute_gradient(query_sample,self.args.alpha,self.args.beta,self.args.delta)
  File "/data/chy/online/ImageNet/retriever.py", line 195, in compute_gradient
    support_gradient = alpha * clip_similairity + beta * margin+ delta * error_rate
TypeError: unsupported operand type(s) for *: 'int' and 'NoneType'
Using sample pool to update the support set:   0%|          | 0/10000 [00:00<?, ?it/s]
Running alpha=0.2, delta=0.2 on device=
2024-10-26 00:03:00,583 - INFO - Loading pretrained ViT-L-14 from OpenAI.
You are using config.init_device='cpu', but you can also use config.init_device="meta" with Composer + FSDP for fast initialization.
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:51<01:43, 51.76s/it]run_alpha=0.2_search-delta.sh: line 10: 16769 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.3 on device=
2024-10-26 00:13:52,866 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 17643 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.4 on device=
2024-10-26 00:14:19,498 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 18062 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.5 on device=
2024-10-26 00:15:10,259 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 18493 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.6 on device=
2024-10-26 00:15:51,314 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 18929 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.7 on device=
2024-10-26 00:17:01,726 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 19363 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.8 on device=
2024-10-26 00:17:46,580 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 19875 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=0.9 on device=
2024-10-26 00:18:33,222 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 20298 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Running alpha=0.2, delta=1.0 on device=
2024-10-26 00:18:53,663 - INFO - Loading pretrained ViT-L-14 from OpenAI.
run_alpha=0.2_search-delta.sh: line 10: 20716 Terminated              python -u main.py --device "1" --M "1000" --alpha "${alpha}" --delta "${delta}"
Grid search completed.
